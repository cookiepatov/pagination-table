{"version":3,"sources":["loaders/Loader.js","utils/utils.js","elements/PaginationTable.js","App.js","reportWebVitals.js","index.js"],"names":["Loader","link","this","_link","fetch","then","response","json","data","_loadJson","cloneData","original","newObj","Object","assign","keys","forEach","key","slice","PaginationTable","props","_url","dataUrl","_maxElements","maxElements","state","headers","cells","pages","sortOrders","currentPage","_setData","getData","res","setState","_updateCells","_setupSortOrders","_originalData","_setupHeaders","_setupPages","_setupCells","cols","map","element","index","headerSortClass","type","onClick","_handleHeaderClick","className","n","length","flat","document","querySelector","scrollTo","page","rows","push","i","_sortColumn","e","_filterData","target","value","newCellsData","newOrder","columnSortState","newData","sort","a","b","_setNewSortOrders","setTimeout","newOrders","order","searchStr","toLowerCase","newRows","filter","row","keep","includes","onInput","_handleFilterInput","_pagesNavigation","React","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6c4dc4d2.chunk.js","sourcesContent":["export default class Loader {\r\n    constructor(link) {\r\n        this._link = `${link}`;\r\n    }\r\n    _loadJson() {\r\n        return fetch(this._link)\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then((data) => {\r\n          return data;\r\n        });\r\n    }\r\n    getData() {\r\n        return this._loadJson();\r\n    }\r\n}","const cloneObject = (original, level) => {\r\n    const newObj = Object.assign({}, original);\r\n    level--;\r\n    if (level) {\r\n        Object.keys(original).forEach(key => {\r\n            newObj[key] = cloneObject(original[key], level)\r\n        })\r\n    }\r\n    return newObj;\r\n}\r\n\r\n\r\nconst cloneData = (original) => {\r\n    const newObj = Object.assign({}, original);\r\n    Object.keys(original).forEach(key => {\r\n        newObj[key] = original[key].slice();\r\n    })\r\n    return newObj;\r\n}\r\n\r\nexport {cloneObject, cloneData}","import * as React from 'react';\r\nimport Loader from '../loaders/Loader';\r\nimport {cloneData} from '../utils/utils'\r\nimport '../style/paginationTableStyle.css'\r\n\r\nexport default class PaginationTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this._url = this.props.dataUrl;\r\n        this._maxElements = this.props.maxElements;\r\n        this.state = {\r\n            data: {},\r\n            headers: {},\r\n            cells: {},\r\n            pages: {},\r\n            sortOrders: [],\r\n            currentPage: 0\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this._setData();\r\n    }\r\n\r\n    // Загрузка данных из JSON по ссылке и первоначальная установка всех параметров\r\n    _setData() {\r\n        const loader = new Loader(this._url);\r\n        loader.getData().then(res => {\r\n            this.setState({ data: res });\r\n            this._updateCells();\r\n            this._setupSortOrders();\r\n            this._originalData = cloneData(res);\r\n        });\r\n    }\r\n\r\n    // Обновление отображаемых данных\r\n\r\n    _updateCells() {\r\n        this._setupHeaders();\r\n        this._setupPages();\r\n        this._setupCells(0);\r\n    }\r\n\r\n    // Установка заголовков\r\n\r\n    _setupHeaders() {\r\n\r\n        const headers = this.state.data.cols.map((element, index) => {\r\n            const headerState = this.state.sortOrders[index];\r\n            let headerSortClass = '';\r\n            switch (headerState) {\r\n                case 0 : {\r\n                    headerSortClass = 'table__cell_sort_down';\r\n                    break;\r\n                }\r\n                case 1 : {\r\n                    headerSortClass = 'table__cell_sort_up';\r\n                    break;\r\n                }\r\n            }\r\n            return <button type='button' \r\n            onClick={()=> {this._handleHeaderClick(index)}}\r\n            className={`table__cell table__cell_type_header ${headerSortClass}`} \r\n            key={`${element}_${index}`}>{element}</button>;\r\n        });\r\n        this.setState({ headers: headers });\r\n    }\r\n\r\n    // Установка значений ячеек на текущей странице\r\n\r\n    _setupCells(n) {\r\n        const cellsData = this.state.pages.length ? this.state.pages[n].flat(2) : [];\r\n        const cells = cellsData.map((element, index) => {\r\n            return <div className={'table__cell'} \r\n            key={`${element}_${index}`}>{element}</div>;\r\n        })\r\n        document.querySelector('.table').scrollTo(0, 0);\r\n        this.setState(\r\n            {\r\n                cells: cells,\r\n                currentPage: n,\r\n            });\r\n    }\r\n\r\n    // Распределение данных по страницам\r\n\r\n    _setupPages() {\r\n        const pages = [];\r\n        let page=[];\r\n        const rows = this.state.data.data;\r\n        rows.forEach((element, index) => {\r\n            page.push(element);\r\n            if(!((index+1)%this._maxElements)) {\r\n                pages.push(page);\r\n                page=[];\r\n            }\r\n            else if(index+1===rows.length) {\r\n                pages.push(page);\r\n            }\r\n        });\r\n        this.setState({pages: pages});\r\n    }\r\n\r\n    // Первоначальная установка сортировки (значения не сортируются)\r\n\r\n    _setupSortOrders() {\r\n        const sortOrders=[]\r\n        this.state.pages.forEach(() => sortOrders.push(null));\r\n        this.setState({sortOrders: sortOrders});\r\n    }\r\n\r\n    // Обработчик клика по заголовку колонки\r\n\r\n    _handleHeaderClick(i) {\r\n        this._sortColumn(i);\r\n    }\r\n\r\n    // Обработчик изменения фильтрации\r\n\r\n    _handleFilterInput(e) {\r\n        this._filterData(e.target.value);\r\n    }\r\n\r\n    // Отображение навигатора по страницам\r\n\r\n    _pagesNavigation() {\r\n        const links = this.state.pages.map((element, index) => {\r\n            const className = (this.state.currentPage===index) ?\r\n            'navigator__button navigator__button_current' : 'navigator__button';\r\n            return <button className={className} \r\n            key={`${element}_${index}`} \r\n            type='button' \r\n            onClick={()=>{this._setupCells(index)}}>{index+1}</button>\r\n        });\r\n        return links\r\n    }\r\n\r\n    // Пересортировка колонки\r\n\r\n    _sortColumn(i) {\r\n        const sortOrders = this.state.sortOrders.slice();\r\n        const columnSortState = sortOrders[i];\r\n        let newCellsData;\r\n        let newOrder;\r\n        const newData = cloneData(this.state.data);\r\n        switch (columnSortState) {\r\n            case null : {\r\n                newOrder = 0;\r\n                newCellsData = this.state.data.data.sort((a, b)=>{\r\n                    return a[i]>b[i] ? 1 : -1;\r\n                })\r\n                break;\r\n            }\r\n            case 0 : {\r\n                newOrder = 1;\r\n                newCellsData = this.state.data.data.sort((a, b)=>{\r\n                    return a[i]>b[i] ? -1 : 1;\r\n                })\r\n                break;\r\n            }\r\n            case 1 : {\r\n                newOrder = 0;\r\n                newCellsData = this.state.data.data.sort((a, b)=>{\r\n                    return a[i]>b[i] ? 1 : -1;\r\n                })\r\n                break;\r\n            }\r\n        }\r\n        newData.data = newCellsData;\r\n        this.setState({data:newData});\r\n        this._setNewSortOrders(i, newOrder);\r\n        setTimeout(()=>this._updateCells(),0);\r\n    }\r\n\r\n    // Установка новых значений сортировки колонок\r\n\r\n    _setNewSortOrders(i, columnSortState) {\r\n        const newOrders = this.state.sortOrders.slice()\r\n        .map((order, index)=>{return (index===i) ? columnSortState : null});\r\n        this.setState({sortOrders:newOrders});\r\n    }\r\n\r\n    // Фильтрация значений\r\n\r\n    _filterData(searchStr) {\r\n        searchStr = searchStr.toLowerCase();\r\n        const newData = cloneData(this._originalData);\r\n        if(searchStr.length>0) {\r\n            const newRows = newData.data.filter(row => {\r\n                let keep = false;\r\n                row.forEach(value=>{\r\n                    if((value+'').toLowerCase().includes(searchStr)) {\r\n                        keep = true\r\n                    }\r\n                })\r\n                return keep;\r\n            })\r\n            newData.data = newRows;\r\n        }\r\n        this.setState({data:newData});\r\n        setTimeout(()=>this._updateCells());\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n        <div className={'table-container'}>\r\n        <span>Фильтр</span>\r\n        <input type='text' className={'table-container'} \r\n        onInput={(e)=>this._handleFilterInput(e)}></input>\r\n            <div className={'table'}>\r\n                {this.state.headers.length>0 && this.state.headers}\r\n                {this.state.cells.length>0 && this.state.cells}\r\n            </div>\r\n            <nav>{this.state.pages.length>0 && this._pagesNavigation()}</nav>\r\n        </div>\r\n        );\r\n\r\n    }\r\n}\r\n","import PaginationTable from \"./elements/PaginationTable.js\";\nfunction App() {\n  const link = './data/data200.json'\n  return (\n    <PaginationTable dataUrl={link} maxElements={50}/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}